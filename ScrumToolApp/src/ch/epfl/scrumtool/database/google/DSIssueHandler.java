package ch.epfl.scrumtool.database.google;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import android.os.AsyncTask;
import ch.epfl.scrumtool.database.Callback;
import ch.epfl.scrumtool.database.IssueHandler;
import ch.epfl.scrumtool.entity.Issue;
import ch.epfl.scrumtool.entity.MainTask;
import ch.epfl.scrumtool.entity.Sprint;
import ch.epfl.scrumtool.exception.NotAuthenticatedException;
import ch.epfl.scrumtool.network.GoogleSession;
import ch.epfl.scrumtool.network.Session;
import ch.epfl.scrumtool.server.scrumtool.Scrumtool;
import ch.epfl.scrumtool.server.scrumtool.model.CollectionResponseScrumIssue;
import ch.epfl.scrumtool.server.scrumtool.model.ScrumIssue;

/**
 * @author sylb, aschneuw, zenhaeus
 * 
 */
public class DSIssueHandler implements IssueHandler {
    private ScrumIssue scrumIssue;

    @Override
    public void insert(final Issue object, final Callback<String> cB) {
        throw new UnsupportedOperationException();
    }
    
    @Override
    public void insert(final Issue object, final MainTask task, final Callback<String> cB) {
        
        scrumIssue = new ScrumIssue();
        scrumIssue.setName(object.getName());
        scrumIssue.setDescription(object.getDescription());
        scrumIssue.setEstimation(object.getEstimatedTime());
        //scrumIssue.setAssignedPlayer(new ScrumPlayer());
        Date date = new Date();
        scrumIssue.setLastModDate(date.getTime());
        try {
            scrumIssue.setLastModUser(Session.getCurrentSession().getUser()
                    .getEmail());
        } catch (NotAuthenticatedException e) {
            // TODO : redirecting to the login activity if not connected
            e.printStackTrace();
        }
    }

    @Override
    public void load(final String key, final Callback<Issue> cB) {
        AsyncTask<String, Void, ScrumIssue> task =
                new AsyncTask<String, Void, ScrumIssue>() {
            @Override
            protected ScrumIssue doInBackground(String... params) {
                ScrumIssue issue = null;
                try {
                    GoogleSession s = (GoogleSession) Session.getCurrentSession();
                    Scrumtool service = s.getAuthServiceObject();
                    issue = service.getScrumIssue(params[0]).execute();
                } catch (IOException | NotAuthenticatedException e) {
                    // TODO : redirecting to the login activity if not connected
                    e.printStackTrace();
                }
                return issue;
            }

            @Override
            protected void onPostExecute(ScrumIssue si) {
                Issue.Builder iB = new Issue.Builder();
                // TODO : id should be generated by the server
                iB.setId(si.getKey());
                iB.setName(si.getName());
                iB.setDescription(si.getDescription());
                iB.setStatus(ch.epfl.scrumtool.entity.Status.valueOf(si.getStatus()));
                iB.setEstimatedTime(si.getEstimation());
                // TODO need to add the player 
                Issue issue = iB.build(); 
                cB.interactionDone(issue);
            }
        };
        task.execute(key);
    }

    @Override
    public void update(final Issue issue, final Issue modified, final Callback<Boolean> dbC) {
        // TODO Auto-generated method stub
    }

    @Override
    public void remove(final Issue object, final Callback<Boolean> dbC) {

    }

    @Override
    public void loadIssues(final MainTask mainTask, final Callback<List<Issue>> callback) {
        AsyncTask<String, Void, CollectionResponseScrumIssue> task =
                new AsyncTask<String, Void, CollectionResponseScrumIssue>() {

            @Override
            protected CollectionResponseScrumIssue doInBackground(String... params) {
                GoogleSession session;
                CollectionResponseScrumIssue issues = null;

                try {
                    session = (GoogleSession) Session.getCurrentSession();
                    Scrumtool service = session.getAuthServiceObject();
                    // TODO not sure about the loadScrumIssues function
                    issues = service.loadScrumIssues(params[0]).execute();
                } catch (NotAuthenticatedException | IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                return issues;
            }

            @Override
            protected void onPostExecute(CollectionResponseScrumIssue result) {
                List<ScrumIssue> resultItems = result.getItems();
                ArrayList<Issue> issues = new ArrayList<Issue>();
                for (ScrumIssue s : resultItems) {
                    Issue.Builder issueBuilder = new Issue.Builder();
                    issueBuilder.setDescription(s.getDescription());
                    issueBuilder.setEstimatedTime(s.getEstimation());
                    issueBuilder.setId(s.getKey());
                    issueBuilder.setName(s.getName());
                    // TODO status(string) constructor
                    // iB.setStatus(s.getStatus());
                    issues.add(issueBuilder.build());
                }
                callback.interactionDone(issues);
            }
        };
        task.execute(mainTask.getKey());
    }

    @Override
    public void loadIssues(Sprint sprint, Callback<List<Issue>> cB) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void addIssue(Issue issue, Sprint sprint, Callback<Boolean> cB) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void removeIssue(Issue issue, Sprint sprint, Callback<Boolean> cB) {
        // TODO Auto-generated method stub
        
    }

}